@page "/dataentry"
<PageTitle>Data Entry</PageTitle>
@rendermode InteractiveServer

@using OOPsReview

<section>
	<h2>DataEntry</h2>
	<p>Employment data Collection</p>

	<div>
		<div>
			<blockquote>
				<p>
					This component will demonstrate how your page can handle validation of data input,
					showing validation messages when you have a number of controls for data entry. This
					component will validate the locate controls and create any validation messages for
					invalid data. The messages can be collected using various techniques such as: List or
					Dictionary.
				</p>
				<p>
					This page will input data for an instance of the Employment class. This demo will
					use the Employment class from the OOPs review. The SupervisoryLevel enum
					class will also be brought into this project. One could have included the entire
					class library as part of this solution instead of bringing in individual classes.
				</p>
			</blockquote>
		</div>
	</div>

	@if (!String.IsNullOrEmpty(FeedbackMsg)){
		<div class="alert alert-success">
			<p>@FeedbackMsg</p>
		</div>
	}

	@*
		Only display error messages if there are messages to display.
	*@
	@if (ErrorMessages.Count > 0){
		<div class="alert alert-danger">
			<ul>
				@foreach (var error in ErrorMessages){
					<li>
						@error.Value
					</li>
				}
			</ul>
		</div>
	}
</section>

@*
	Sets up our form for Employment data
*@
<fieldset>
	<legend>Employment Data</legend> @*Gives us a form friendly header.*@

	<div class="row">
		<div class="col-md-2">
			<label for="title">Position Title</label>
		</div>
		<div class="col-md-2">
			<input type="text" id="title" placeholder="Enter Position"
			@bind="EmploymentTitle"/>
		</div>
	</div>

	<div class="row">
		<div class="col-md-2">
			<label for="years">Years in Position</label>
		</div>
		@*
			Step sets the increments for the up/down arrows.
		*@
		<div class="col-md-2">
			<input type="number" id="years" step="0.1"
			@bind="EmploymentYears" />
		</div>
	</div>

	<div class="row">
		<div class="col-md-2">
			<label for="start">Position Start Date</label>
		</div>
		<div class="col-md-2">
			<input type="date" id="start" placeholder="DateTime.Today" @bind="EmploymentStart" />
		</div>
	</div>

	<div class="row">
		<div class="col-md-2">
			<label for="level">Supervisory Level</label>
		</div>
		<div class="col-md-2">
			<select id="level" @bind="EmploymentLevel">
				@* I could manually set this up:
				<option value="Entry">Entry</option>
				.
				.
				.

				or...
			*@

				<!--
				GetValues returns a list of values as an array.
				typeof gets the "defenition" of SupervisoryLevel.
				-->
				@foreach (var item in Enum.GetValues(typeof(SupervisoryLevel))){
					<option value="@item">@item</option>
				}
			</select>
		</div>

		<div class="row">
			<div class="col-md-2">
				<button @onclick="Submit">Submit</button>

				<button type="submit" @onclick="Clear">Clear</button>
			</div>
		</div>
	</div>
</fieldset>

@code{

}