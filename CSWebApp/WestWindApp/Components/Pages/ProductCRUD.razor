@page "/productcrud/{ProductID:int?}"
@using WestWindSystem.Entities
@using WestWindSystem.BLL

@rendermode InteractiveServer

<PageTitle>Product CRUD</PageTitle>

<h1>Product CRUD</h1>

@if (FeedbackMessage != String.Empty)
{
    <div class="alert alert-info">
        @FeedbackMessage
    </div>
}

<!--EditForm Region-->
<!--We use IDs instead of names for our label/inputs as this will compile to JS.-->
<EditForm EditContext="_EditContext">
    <!--Allows our form to validate data using the Entity and get the error messages.-->
    <DataAnnotationsValidator/>

    <!--Shows all of our validation errors.-->
    <ValidationSummary/>

    <fieldset>
        <label id="productID">Product ID</label>
        <!--Readonly as our DB should be setting this.-->
        <InputNumber id="productID" @bind-Value="CurrentProduct.ProductID" readonly/>

        <label id="name">Name</label>
        <InputText id="name" @bind-Value="CurrentProduct.ProductName"/>
        <!--I can add inline validation to the property above.-->
        <ValidationMessage for="@(() => CurrentProduct.ProductName)"/>

        <label id="supplier">Supplier</label>
        <InputSelect id="supplier" @bind-Value="CurrentProduct.SupplierID">
            <option value="0">...Select...</option>
            @foreach (Supplier Sup in Suppliers)
            {
                <!--This sets our selected item to the item passed from our other page.-->
                <option value="@Sup.SupplierID" 
                selected="@(Sup.SupplierID == CurrentProduct.SupplierID)">
                    @Sup.CompanyName
                </option>
            }
        </InputSelect>
        <ValidationMessage for="@(() => CurrentProduct.SupplierID)" />

        <label id="category">Category</label>
        <InputSelect id="category" @bind-Value="CurrentProduct.CategoryID">
            <option value="0">...Select...</option>
            @foreach(Category Cat in Categories)
            {
                <option value="@Cat.CategoryID"
                selected="@(Cat.CategoryID == CurrentProduct.CategoryID)">
                    @Cat.CategoryName
                </option>
            }
        </InputSelect>

        <label id="qty">Qty / Unit</label>
        <InputText id="qty" @bind-Value="CurrentProduct.QuantityPerUnit"/>

        <label id="unitprice">Unit Price</label>
        <InputNumber id="unitprice" @bind-Value="CurrentProduct.UnitPrice"/>
        <ValidationMessage for="@(() => CurrentProduct.UnitPrice)" />

        <label id="minorder">Min Order Qty</label>
        <InputNumber id="minorder" @bind-Value="CurrentProduct.MinimumOrderQuantity"/>

        <label id="units">Units on Order</label>
        <InputNumber id="units" @bind-Value="CurrentProduct.UnitsOnOrder"/>
    </fieldset>

    <fieldset>
        <button type="submit" @onclick="OnCreate">
            Create
        </button>
        <button type="submit" @onclick="OnUpdate">
            Update
        </button>
        @if (CurrentProduct.Discontinued)
        {
            <button type="submit" @onclick="OnActivated">
                Activate
            </button>
        }
        else
        {
            <button type="submit" @onclick="OnDiscontinue">
                Discontinue
            </button>
        }
        <button type="button" @onclick="OnClear">
            Clear
        </button>
        <button type="button" @onclick="GoToSearch">
            Search
        </button>
    </fieldset>
</EditForm>

<!--EditForm Region End-->

@code {

    private string? FeedbackMessage = String.Empty;

    [Inject]
    private ProductServices _ProductServices { get; set; }

    [Inject]
    private CategoryServices _CategoryServices { get; set; }

    [Inject]
    private SupplierServices _SupplierServices { get; set; }

    //We will be binding all of our Inputs to this instance of our Entity
    private Product CurrentProduct = new();

    //We can't initialize _EditContext here. We must initialize after the page is loaded.
    private EditContext _EditContext;

    private ValidationMessageStore _ValidationMessageStore;

    private List<Category> Categories = new();
    private List<Supplier> Suppliers = new();

    private int SelectedCategoryId;

    //Must match the value in our @page declaration
    [Parameter]
    public int? ProductID { get; set; }

    [Inject]
    protected NavigationManager NavManager { get; set; }

    [Inject]
    protected IJSRuntime JSRuntime { get; set; }

    protected override void OnInitialized()
    {
        Categories = _CategoryServices.GetAllCategories();
        Suppliers = _SupplierServices.GetAllSuppliers();

        //Must be initialized here or in another method. Preferably here.
        _EditContext = new EditContext(CurrentProduct);

        //Shorthand constructor.
        _ValidationMessageStore = new(_EditContext);

        if(ProductID.HasValue)
        {
            //We need .Value as ProductID is nullable.
            CurrentProduct = _ProductServices.GetProductByID(ProductID.Value);
        }

        base.OnInitialized(); 
    }

    private void Clear()
    {
        FeedbackMessage = String.Empty;
        _ValidationMessageStore.Clear();
    }

    #region CRUD methods

    /// <summary>
    /// Generates a new entry in our DB representing the product that we have created in our Form.
    /// </summary>
    private void OnCreate()
    {
        Clear();

        try
        {
            //First validate there are no errors in our form.
            if (_EditContext.Validate())
            {
                //Need check that our Category is not 0. CategoryID is a foreign key, so 0 is an invalid number.
                if(CurrentProduct.CategoryID == 0)
                {
                    //Add error message to ValidationMessageStore
                    //Field allows us to access any of the Inputs in our EditForm through the @bind-value
                    //nameof gets our Variable Name, not the value
                    _ValidationMessageStore.Add(_EditContext.Field(nameof(CurrentProduct.CategoryID)), "You must select a Category");
                }

                //Same as above for SupplierID
                if(CurrentProduct.SupplierID == 0)
                {
                    _ValidationMessageStore.Add(_EditContext.Field(nameof(CurrentProduct.SupplierID)), "You must select a Supplier");
                }

                //We could add any other validation we need here

                //Check if there were any new errors
                //.Any checks if there's anything in it
                if(_EditContext.GetValidationMessages().Any())
                {
                    //Notify our Form that there are errors and tell it to update our error messages
                    _EditContext.NotifyValidationStateChanged();
                }
                //If nothing's broken we can submit the data
                else
                {
                    //We should get this product ID from our DataBase
                    int newProductID = _ProductServices.AddProduct(CurrentProduct);

                    FeedbackMessage = $"Product {CurrentProduct.ProductName} w/ ID: {newProductID} has been saved.";
                }
            }
        }

        catch (ArgumentNullException ex)
        {
            //usually if an error occurs only ONE message will be executed
            //You could setup a special error message string to display on your page
            //that is NOT the validationMessageStore and is NOT the feedBackMessage
            //You could style this special error message string as an alert alert-danger
            FeedbackMessage = $"Missing Data: {GetInnerException(ex).Message}";
        }
        catch (ArgumentException ex)
        {
            FeedbackMessage = $"Data Issue: {GetInnerException(ex).Message}";
        }
        catch (Exception ex)
        {
            FeedbackMessage = $"System Error: {GetInnerException(ex).Message}";
        }
    }

    private void OnUpdate()
    {
        Clear();

        try
        {
            //First validate there are no errors in our form.
            if (_EditContext.Validate())
            {
                //Need check that our Category is not 0. CategoryID is a foreign key, so 0 is an invalid number.
                if (CurrentProduct.CategoryID == 0)
                {
                    //Add error message to ValidationMessageStore
                    //Field allows us to access any of the Inputs in our EditForm through the @bind-value
                    //nameof gets our Variable Name, not the value
                    _ValidationMessageStore.Add(_EditContext.Field(nameof(CurrentProduct.CategoryID)), "You must select a Category");
                }

                //Same as above for SupplierID
                if (CurrentProduct.SupplierID == 0)
                {
                    _ValidationMessageStore.Add(_EditContext.Field(nameof(CurrentProduct.SupplierID)), "You must select a Supplier");
                }

                //We could add any other validation we need here

                //Check if there were any new errors
                //.Any checks if there's anything in it
                if (_EditContext.GetValidationMessages().Any())
                {
                    //Notify our Form that there are errors and tell it to update our error messages
                    _EditContext.NotifyValidationStateChanged();
                }
                //If nothing's broken we can submit the data
                else
                {
                    int affectedRows = _ProductServices.UpdateProduct(CurrentProduct);

                    //Check that it worked
                    if(affectedRows == 0)
                    {
                        FeedbackMessage = $"Product {CurrentProduct.ProductName} w/ ID: {CurrentProduct.ProductID} has not been Updated.";
                    }
                    else
                    {
                        FeedbackMessage = $"Product {CurrentProduct.ProductName} w/ ID: {CurrentProduct.ProductID} has been Updated.";
                    }
                }
            }
        }
        catch (ArgumentNullException ex)
        {
            //usually if an error occurs only ONE message will be executed
            //You could setup a special error message string to display on your page
            //that is NOT the validationMessageStore and is NOT the feedBackMessage
            //You could style this special error message string as an alert alert-danger
            FeedbackMessage = $"Missing Data: {GetInnerException(ex).Message}";
        }
        catch (ArgumentException ex)
        {
            FeedbackMessage = $"Data Issue: {GetInnerException(ex).Message}";
        }
        catch (Exception ex)
        {
            FeedbackMessage = $"System Error: {GetInnerException(ex).Message}";
        }
    }

    private void OnDiscontinue()
    {
        Clear();

        try
        {
            //First validate there are no errors in our form.
            if (_EditContext.Validate())
            {
                //Need check that our Category is not 0. CategoryID is a foreign key, so 0 is an invalid number.
                if (CurrentProduct.CategoryID == 0)
                {
                    //Add error message to ValidationMessageStore
                    //Field allows us to access any of the Inputs in our EditForm through the @bind-value
                    //nameof gets our Variable Name, not the value
                    _ValidationMessageStore.Add(_EditContext.Field(nameof(CurrentProduct.CategoryID)), "You must select a Category");
                }

                //Same as above for SupplierID
                if (CurrentProduct.SupplierID == 0)
                {
                    _ValidationMessageStore.Add(_EditContext.Field(nameof(CurrentProduct.SupplierID)), "You must select a Supplier");
                }

                //We could add any other validation we need here

                //Check if there were any new errors
                //.Any checks if there's anything in it
                if (_EditContext.GetValidationMessages().Any())
                {
                    //Notify our Form that there are errors and tell it to update our error messages
                    _EditContext.NotifyValidationStateChanged();
                }
                //If nothing's broken we can submit the data
                else
                {
                    int affectedRows = _ProductServices.DiscontinueProduct(CurrentProduct);

                    //Check that it worked
                    if (affectedRows == 0)
                    {
                        FeedbackMessage = $"Product {CurrentProduct.ProductName} w/ ID: {CurrentProduct.ProductID} has not been Discontinued.";
                    }
                    else
                    {
                        FeedbackMessage = $"Product {CurrentProduct.ProductName} w/ ID: {CurrentProduct.ProductID} has been Discontinued.";
                    }
                }
            }
        }
        catch (ArgumentNullException ex)
        {
            //usually if an error occurs only ONE message will be executed
            //You could setup a special error message string to display on your page
            //that is NOT the validationMessageStore and is NOT the feedBackMessage
            //You could style this special error message string as an alert alert-danger
            FeedbackMessage = $"Missing Data: {GetInnerException(ex).Message}";
        }
        catch (ArgumentException ex)
        {
            FeedbackMessage = $"Data Issue: {GetInnerException(ex).Message}";
        }
        catch (Exception ex)
        {
            FeedbackMessage = $"System Error: {GetInnerException(ex).Message}";
        }
    }

    private void OnActivated()
    {
        Clear();

        try
        {
            int affectedRows = _ProductServices.ActivateProduct(CurrentProduct);

            //Check that it worked
            if (affectedRows == 0)
            {
                FeedbackMessage = $"Product {CurrentProduct.ProductName} w/ ID: {CurrentProduct.ProductID} has not been Activated.";
            }
            else
            {
                FeedbackMessage = $"Product {CurrentProduct.ProductName} w/ ID: {CurrentProduct.ProductID} has been Activated.";
            }
        }
        catch (ArgumentNullException ex)
        {
            //usually if an error occurs only ONE message will be executed
            //You could setup a special error message string to display on your page
            //that is NOT the validationMessageStore and is NOT the feedBackMessage
            //You could style this special error message string as an alert alert-danger
            FeedbackMessage = $"Missing Data: {GetInnerException(ex).Message}";
        }
        catch (ArgumentException ex)
        {
            FeedbackMessage = $"Data Issue: {GetInnerException(ex).Message}";
        }
        catch (Exception ex)
        {
            FeedbackMessage = $"System Error: {GetInnerException(ex).Message}";
        }
    }

    #endregion

    private async Task OnClear()
    {
        if(await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to clear the form?"))
        {
            Clear();

            CurrentProduct = new();

            //Update our EditContext
            _EditContext = new EditContext(CurrentProduct);
        }
    }

    private async Task GoToSearch()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to leave this page?"))
        {
            Clear();

            NavManager.NavigateTo("categoryproducts");
        }
    }

    private Exception GetInnerException(Exception ex)
    {
        while (ex.InnerException != null)
            ex = ex.InnerException;
        return ex;
    }
}
